apiVersion: 1.0.0
metadata:
  name: order-management
projects:
- name: gateway
  source:
    type: git
    location: https://github.com/rromannissen/gateway-crw.git
    branch: master
- name: orders
  source:
    type: git
    location: https://github.com/rromannissen/orders-crw.git
    branch: master
- name: inventory
  source:
    type: git
    location: https://github.com/rromannissen/inventory-crw.git
    branch: master
- name: customers
  source:
    type: git
    location: https://github.com/rromannissen/customers-crw.git
    branch: master
components:
- alias: postgresql-customers
  type: kubernetes
  referenceContent: |
    apiVersion: v1
    kind: List
    items:
    - apiVersion: v1
      kind: Secret
      metadata:
        annotations:
          template.openshift.io/expose-database_name: '{.data[''database-name'']}'
          template.openshift.io/expose-password: '{.data[''database-password'']}'
          template.openshift.io/expose-username: '{.data[''database-user'']}'
        labels:
          template: postgresql-ephemeral-template
        name: postgresql-customers
      stringData:
        database-name: customers
        database-password: customers
        database-user: customers
    - apiVersion: v1
      kind: Service
      metadata:
        annotations:
          template.openshift.io/expose-uri: postgres://{.spec.clusterIP}:{.spec.ports[?(.name=="postgresql")].port}
        labels:
          template: postgresql-ephemeral-template
        name: postgresql-customers
      spec:
        ports:
        - name: postgresql
          nodePort: 0
          port: 5432
          protocol: TCP
          targetPort: 5432
        selector:
          name: postgresql-customers
        sessionAffinity: None
        type: ClusterIP
      status:
        loadBalancer: {}
    - apiVersion: apps.openshift.io/v1
      kind: DeploymentConfig
      metadata:
        annotations:
          template.alpha.openshift.io/wait-for-ready: "true"
        labels:
          template: postgresql-ephemeral-template
        name: postgresql-customers
      spec:
        replicas: 1
        selector:
          name: postgresql-customers
        strategy:
          type: Recreate
        template:
          metadata:
            labels:
              name: postgresql-customers
          spec:
            containers:
            - capabilities: {}
              env:
              - name: POSTGRESQL_USER
                valueFrom:
                  secretKeyRef:
                    key: database-user
                    name: postgresql-customers
              - name: POSTGRESQL_PASSWORD
                valueFrom:
                  secretKeyRef:
                    key: database-password
                    name: postgresql-customers
              - name: POSTGRESQL_DATABASE
                valueFrom:
                  secretKeyRef:
                    key: database-name
                    name: postgresql-customers
              image: ' '
              imagePullPolicy: IfNotPresent
              livenessProbe:
                exec:
                  command:
                  - /usr/libexec/check-container
                  - --live
                initialDelaySeconds: 120
                timeoutSeconds: 10
              name: postgresql
              ports:
              - containerPort: 5432
                protocol: TCP
              readinessProbe:
                exec:
                  command:
                  - /usr/libexec/check-container
                initialDelaySeconds: 5
                timeoutSeconds: 1
              resources:
                limits:
                  memory: 512Mi
              securityContext:
                capabilities: {}
                privileged: false
              terminationMessagePath: /dev/termination-log
              volumeMounts:
              - mountPath: /var/lib/pgsql/data
                name: postgresql-customers-data
            dnsPolicy: ClusterFirst
            restartPolicy: Always
            volumes:
            - emptyDir:
                medium: ""
              name: postgresql-customers-data
        triggers:
        - imageChangeParams:
            automatic: true
            containerNames:
            - postgresql
            from:
              kind: ImageStreamTag
              name: postgresql:10-el8
              namespace: openshift
            lastTriggeredImage: ""
          type: ImageChange
        - type: ConfigChange
      status: {}
